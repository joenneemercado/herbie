generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                    Int                     @id @default(autoincrement())
  name                  String
  slug                  String?
  domain                String?
  created_at            DateTime?               @default(now())
  updated_at            DateTime?               @updatedAt
  user_id               Int?
  public_id             String?                 @unique @default(cuid())
  avatar_url            String?
  updated_by            Int?
  addresses             Address[]
  AudienceStatus        AudienceStatus[]
  Audiences             Audiences[]
  AudiencesContacts     AudiencesContacts[]
  CampaignAudience      CampaignAudience[]
  CampaignDetails       CampaignDetails[]
  CampaignDetailsStatus CampaignDetailsStatus[]
  CampaignStatus        CampaignStatus[]
  Campaigns             Campaigns[]
  Channels              Channels[]
  customers             Customer[]
  CustomerField         CustomerField[]
  CustomerUnified       CustomerUnified[]
  Event                 Event[]
  ImportJob             ImportJob[]
  interactions          Interaction[]
  members               Member[]
  orders                Order[]
  RFM                   RFM[]
  segments              Segment[]
  sellers               Seller[]
  SellerChain           SellerChain[]
  Tags                  Tags[]
  events                TypeEvent[]
  users                 User[]
}

model Member {
  role            Role         @default(MEMBER)
  id              Int          @id @default(autoincrement())
  organization_id String
  user_id         Int
  organization    Organization @relation(fields: [organization_id], references: [public_id])
  user            User         @relation(fields: [user_id], references: [id])
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique
  password              String
  name                  String
  role                  String
  last_access           DateTime?
  created_at            DateTime?               @default(now())
  updated_at            DateTime?               @updatedAt
  organization_id       String
  ConfigurationsChannel ConfigurationsChannel[]
  members               Member[]
  orders                Order[]
  organization          Organization            @relation(fields: [organization_id], references: [public_id])
}

model TypeEvent {
  id              Int           @id @default(autoincrement())
  name            String
  description     String?
  organization_id String?
  events          Event[]
  organization    Organization? @relation(fields: [organization_id], references: [public_id], onDelete: Restrict)
}

model Seller {
  id              Int           @id @default(autoincrement())
  name            String
  seller_ref      String
  address_ref     String?
  neighborhood    String?
  street          String?
  city            String?
  state           String?
  country         String?
  postal_code     String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  channel         String?
  organization_id String
  store_chain_id  Int?
  Interaction     Interaction[]
  orders          Order[]
  organization    Organization  @relation(fields: [organization_id], references: [public_id])
  sellerchain     SellerChain?  @relation(fields: [store_chain_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "seller_sellerchain_fk")
}

model Event {
  id              Int           @id @default(autoincrement())
  name            String
  type_event_id   Int
  organization_id String?       @db.VarChar
  type_event      TypeEvent     @relation(fields: [type_event_id], references: [id])
  Organization    Organization? @relation(fields: [organization_id], references: [public_id], onDelete: NoAction, onUpdate: NoAction, map: "event_organization_fk")
  Interaction     Interaction[]
}

model Order {
  id                      Int              @id @default(autoincrement())
  order_ref               String
  order_date              DateTime
  total                   Int
  subtotal                Int
  total_with_discounts    Int?
  shipping_total          Int?
  percent_discount_total  Int?
  absolute_discount_total Int?
  coupon_code             String?
  coupon_description      String?
  user_id                 Int
  seller_id               Int
  organization_id         String
  customer_id             Int?
  total_items             Int?
  customer_unified_id     Int?
  seller                  Seller           @relation(fields: [seller_id], references: [id])
  user                    User             @relation(fields: [user_id], references: [id])
  Customer                Customer?        @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_customer_fk")
  CustomerUnified         CustomerUnified? @relation(fields: [customer_unified_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_customerunified_fk")
  organization            Organization     @relation(fields: [organization_id], references: [public_id], onDelete: NoAction, onUpdate: NoAction, map: "order_organization_fk")
  order_items             OrderItem[]
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  quantity Float   @db.Real
  price    Int
  discount Int?
  total    Int
  order_id Int
  ean      String? @db.VarChar
  name     String  @db.VarChar
  sku      String  @db.VarChar
  brand    String? @db.VarChar
  category String? @db.VarChar
  order    Order   @relation(fields: [order_id], references: [id])
}

model Customer {
  id                       Int                        @id @default(autoincrement())
  email                    String?
  phone                    String?
  cpf                      String?
  cnpj                     String?
  company_name             String?
  trading_name             String?
  date_birth               DateTime?
  gender                   String?
  marital_status           String?
  organization_id          String
  public_id                String                     @unique @default(cuid())
  firstname                String
  lastname                 String?
  nickname                 String?
  created_at               DateTime?                  @default(now())
  created_by               Int?
  last_updated_system      String?
  updated_at               DateTime?                  @updatedAt
  updated_by               Int?
  has_child                Int?
  source_id                Int?
  is_unified               Boolean?                   @default(false)
  facebook                 String?                    @db.VarChar
  instagram                String?                    @db.VarChar
  tiktok                   String?                    @db.VarChar
  x                        String?                    @db.VarChar
  whatsapp                 String?                    @db.VarChar
  addresses                Address[]
  organization             Organization               @relation(fields: [organization_id], references: [public_id])
  Source                   Source?                    @relation(fields: [source_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_source_fk")
  customer_fields          CustomerField[]
  Customer_CustomerUnified Customer_CustomerUnified[]
  Interaction              Interaction[]
  Order                    Order[]
  segments                 SegmentCustomer[]

  @@unique([cnpj, source_id], map: "customer_cnpj_idx")
}

model CustomerUnified {
  id                       Int                        @id @default(autoincrement())
  email                    String?                    @unique(map: "customerunified_email_idx")
  phone                    String?
  cpf                      String?                    @unique(map: "customerunified_cpf_idx")
  cnpj                     String?
  company_name             String?
  trading_name             String?
  date_birth               DateTime?
  gender                   String?
  marital_status           String?
  organization_id          String
  public_id                String                     @unique @default(cuid())
  firstname                String?
  lastname                 String?
  nickname                 String?
  created_at               DateTime?                  @default(now())
  created_by               Int?
  last_updated_system      String?
  updated_at               DateTime?                  @updatedAt
  updated_by               Int?
  has_child                Int?
  status_id                Int?
  score_fields             Int?                       @default(0)
  score_behavior           Int?                       @default(0)
  score_shop               String?                    @db.VarChar
  score                    Int?                       @default(0)
  facebook                 String?                    @db.VarChar
  instagram                String?                    @db.VarChar
  tiktok                   String?                    @db.VarChar
  whatsapp                 String?                    @db.VarChar
  x                        String?                    @db.VarChar
  divergent_fields         Json?                      @db.Json
  addresses                Address[]
  AssociationTags          AssociationTags[]
  AudiencesContacts        AudiencesContacts[]
  CampaignDetails          CampaignDetails[]
  customer_fields          CustomerField[]
  organization             Organization               @relation(fields: [organization_id], references: [public_id])
  CustomerUnifiedTags      CustomerUnifiedTags[]
  Customer_CustomerUnified Customer_CustomerUnified[]
  Interaction              Interaction[]
  Order                    Order[]
  RFM                      RFM[]
  segments                 SegmentCustomer[]
}

model Customer_CustomerUnified {
  id                  Int             @id @default(autoincrement())
  customer_id         Int
  customer_unified_id Int
  created_at          DateTime?       @default(now())
  updated_at          DateTime?       @updatedAt
  Customer            Customer        @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_customerunified_customer_fk")
  CustomerUnified     CustomerUnified @relation(fields: [customer_unified_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_customerunified_customerunified_fk")

  @@unique([customer_unified_id, customer_id], map: "customer_customerunified_customer_unified_id_idx")
}

model Address {
  id                  Int              @id @default(autoincrement())
  address_ref         String?
  neighborhood        String?
  street              String?
  city                String?
  state               String?
  country             String?
  postal_code         String?
  address_type        String?
  is_default          Boolean?
  organization_id     String
  customer_id         String
  customer_unified_id Int?
  complement          String?
  number              String?
  CustomerUnified     CustomerUnified? @relation(fields: [customer_unified_id], references: [id], map: "Address_customerUnifiedId_fkey")
  customer            Customer         @relation(fields: [customer_id], references: [public_id])
  organization        Organization     @relation(fields: [organization_id], references: [public_id])
}

model CustomerField {
  id                  Int              @id @default(autoincrement())
  customer_id         String?
  type                String
  description         String?
  value               String?
  organization_id     String
  customer_unified_id Int?
  CustomerUnified     CustomerUnified? @relation(fields: [customer_unified_id], references: [id], map: "CustomerField_customerUnifiedId_fkey")
  customer            Customer?        @relation(fields: [customer_id], references: [public_id], onDelete: Restrict)
  organization        Organization     @relation(fields: [organization_id], references: [public_id])

  @@unique([type, organization_id, customer_unified_id], map: "customerfield_type_idx")
}

model Interaction {
  id                  Int              @id @default(autoincrement())
  type                String?
  details             Json
  organization_id     String
  source_id           Int
  created_at          DateTime?        @default(now())
  event_id            Int
  customer_unified_id Int?
  customer_id         Int?
  total               Float?
  updated_at          DateTime?
  created_by          Int?
  status_id           Int?
  seller_id           Int?
  CustomerUnified     CustomerUnified? @relation(fields: [customer_unified_id], references: [id], map: "Interaction_customerUnifiedId_fkey")
  event               Event            @relation(fields: [event_id], references: [id])
  organization        Organization     @relation(fields: [organization_id], references: [public_id])
  Customer            Customer?        @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "interaction_customer_fk")
  Seller              Seller?          @relation(fields: [seller_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "interaction_seller_fk")
  Source              Source           @relation(fields: [source_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "interaction_source_fk")
  Status              Status?          @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "interaction_status_fk")
}

model Segment {
  id              Int               @id @default(autoincrement())
  name            String
  criteria        Json
  organization_id String
  organization    Organization      @relation(fields: [organization_id], references: [public_id])
  customers       SegmentCustomer[]
}

model SegmentCustomer {
  segment_id          Int
  customer_id         String
  customer_unified_id Int?
  CustomerUnified     CustomerUnified? @relation(fields: [customer_unified_id], references: [id], map: "SegmentCustomer_customerUnifiedId_fkey")
  customer            Customer         @relation(fields: [customer_id], references: [public_id])
  segment             Segment          @relation(fields: [segment_id], references: [id])

  @@id([segment_id, customer_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Source {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar
  description String?       @db.VarChar
  color_code  String?       @db.VarChar
  status_id   Int?
  trust_score Int?          @default(0)
  Customer    Customer[]
  Interaction Interaction[]
}

model TempCustomerIssues {
  id                  Int       @id(map: "Customer_pkey_1") @default(autoincrement())
  email               String?
  phone               String?
  cpf                 String?
  cnpj                String?
  company_name        String?
  trading_name        String?
  date_birth          DateTime?
  gender              String?
  marital_status      String?
  organization_id     String?
  public_id           String?
  firstname           String?
  lastname            String?
  nickname            String?
  created_at          DateTime? @default(now())
  created_by          Int?
  last_updated_system String?
  updated_at          DateTime?
  updated_by          Int?
  has_child           Int?
  source_id           Int?
  issue_description   String?
}

model Status {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar
  description String?       @db.VarChar
  color_code  String?       @db.VarChar
  Interaction Interaction[]
}

model Audiences {
  created_at        DateTime?           @default(now())
  id                Int                 @id @default(autoincrement())
  organization_id   String
  name              String              @db.VarChar(255)
  obs               String?
  status_id         Int?                @default(1)
  updated_at        DateTime?           @default(now())
  created_by        Int?
  updated_by        Int?
  organization      Organization        @relation(fields: [organization_id], references: [public_id])
  AudienceStatus    AudienceStatus?     @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audiences_audiencestatus_fk")
  AudiencesContacts AudiencesContacts[]
  CampaignAudience  CampaignAudience[]
}

model Campaigns {
  id               Int                @id @default(autoincrement())
  name             String
  message          String
  file             String?
  type_message     Int
  sending_by       String?            @db.VarChar(255)
  status_id        Int?
  created_at       DateTime?          @default(now())
  updated_at       DateTime?          @default(now())
  created_by       Int?               @default(1)
  priority         Int?               @default(0)
  updated_by       Int?
  channel_id       Int?
  date_start       DateTime?          @default(now())
  date_end         DateTime?
  json_meta        Json?
  subject          String?
  organization_id  String
  AssociationTags  AssociationTags[]
  CampaignAudience CampaignAudience[]
  CampaignDetails  CampaignDetails[]
  Channels         Channels?          @relation(fields: [channel_id], references: [id], map: "Campaigns_idChannel_fkey")
  organization     Organization       @relation(fields: [organization_id], references: [public_id])
  CampaignStatus   CampaignStatus?    @relation(fields: [status_id], references: [id], map: "Campaigns_statusId_fkey")

  @@index([created_at], map: "Campaigns_createdAt_idx")
  @@index([date_start, date_end], map: "Campaigns_dateStart_dateEnd_idx")
  @@index([channel_id, status_id, created_at], map: "Campaigns_idChannel_statusId_createdAt_idx")
  @@index([sending_by], map: "Campaigns_sendingBy_idx")
  @@index([sending_by, status_id, created_at], map: "Campaigns_sendingBy_statusId_createdAt_idx")
  @@index([status_id, channel_id, created_at, type_message, date_start, date_end], map: "Campaigns_statusId_idChannel_createdAt_typeMessage_dateStar_idx")
  @@index([status_id], map: "Campaigns_statusId_idx")
  @@index([status_id, updated_at], map: "Campaigns_statusId_updatedAt_idx")
  @@index([updated_at], map: "Campaigns_updatedAt_idx")
}

model Channels {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(255)
  type                  String?                 @db.VarChar(255)
  color_code            String?
  status_id             Int
  created_at            DateTime?               @default(now())
  updated_at            DateTime?               @default(now())
  created_by            Int?                    @default(1)
  updated_by            Int?
  organization_id       String
  provider              String?                 @db.VarChar
  cost                  Float?                  @db.Real
  Campaigns             Campaigns[]
  organization          Organization            @relation(fields: [organization_id], references: [public_id])
  ConfigurationsChannel ConfigurationsChannel[]
  IntegrationTokens     IntegrationTokens[]
}

model Tags {
  id                  Int                   @id @default(autoincrement())
  name                String
  color               String?               @db.VarChar(255)
  created_at          DateTime?             @default(now())
  updated_at          DateTime?             @default(now())
  created_by          Int?
  organization_id     String
  updated_by          Int?
  AssociationTags     AssociationTags[]
  CustomerUnifiedTags CustomerUnifiedTags[]
  organization        Organization          @relation(fields: [organization_id], references: [public_id])
}

model CustomerUnifiedTags {
  id                  Int              @id(map: "customerunifiedtags_pk") @default(autoincrement())
  customer_unified_id Int?
  tag_id              Int?
  CustomerUnified     CustomerUnified? @relation(fields: [customer_unified_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customerunifiedtags_customerunified_fk")
  Tags                Tags?            @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customerunifiedtags_tags_fk")
}

model ConfigurationsChannel {
  id              Int       @id @default(autoincrement())
  description     String    @db.VarChar(255)
  channel_id      Int
  created_at      DateTime? @default(now())
  updated_at      DateTime
  user_id         Int
  value           String?   @db.VarChar(255)
  organization_id String    @db.VarChar
  Channels        Channels  @relation(fields: [channel_id], references: [id], map: "ConfigurationsChannel_idChannel_fkey")
  User            User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([created_at], map: "ConfigurationsChannel_createdAt_idx")
  @@index([channel_id, user_id], map: "ConfigurationsChannel_idChannel_user_id_idx")
  @@index([updated_at], map: "ConfigurationsChannel_updatedAt_idx")
  @@index([user_id, channel_id, created_at], map: "ConfigurationsChannel_user_id_idChannel_createdAt_idx")
}

model IntegrationTokens {
  id         Int       @id @default(autoincrement())
  channel_id Int
  label      String
  value      String
  status_id  Int
  created_at DateTime? @default(now())
  updated_at DateTime  @default(now())
  created_by Int?
  updated_by Int?
  Channels   Channels  @relation(fields: [channel_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "IntegrationTokens_idChannel_fkey")

  @@index([channel_id, label], map: "IntegrationTokens_idChannel_label_idx")
}

model AssociationTags {
  id                  Int              @id(map: "Associationtags_pkey") @default(autoincrement())
  tag_id              Int
  campaing_id         Int?
  customer_unified_id Int?
  created_at          DateTime?        @default(now())
  updated_at          DateTime?        @default(now())
  created_by          Int?
  organization_id     String
  updated_by          Int?
  Campaigns           Campaigns?       @relation(fields: [campaing_id], references: [id], map: "Associationtags_idCampaing_fkey")
  Tags                Tags             @relation(fields: [tag_id], references: [id], map: "Associationtags_idTag_fkey")
  CustomerUnified     CustomerUnified? @relation(fields: [customer_unified_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "associationtags_customerunified_fk")

  @@index([campaing_id], map: "Associationtags_idCampaing_idx")
  @@index([customer_unified_id], map: "Associationtags_idCustomer_idx")
  @@index([tag_id], map: "Associationtags_idTag_idx")
}

model AudienceStatus {
  id                Int                 @id(map: "Audiencestatus_pkey") @default(autoincrement())
  name              String              @db.VarChar(255)
  created_at        DateTime?           @default(now())
  created_by        Int?
  organization_id   String
  updated_at        DateTime?
  updated_by        Int?
  Organization      Organization        @relation(fields: [organization_id], references: [public_id], map: "Audiencestatus_organization_id_fkey")
  Audiences         Audiences[]
  AudiencesContacts AudiencesContacts[]
}

model AudiencesContacts {
  id              Int             @id(map: "Audiencescontacts_pkey") @default(autoincrement())
  contact_id      Int
  organization_id String
  audience_id     Int
  status_id       Int?
  created_at      DateTime?       @default(now())
  updated_at      DateTime?       @default(now())
  created_by      Int?
  updated_by      Int?
  Audiences       Audiences       @relation(fields: [audience_id], references: [id], map: "Audiencescontacts_idAudience_fkey")
  CustomerUnified CustomerUnified @relation(fields: [contact_id], references: [id], map: "Audiencescontacts_idContact_fkey")
  Organization    Organization    @relation(fields: [organization_id], references: [public_id], map: "Audiencescontacts_organization_id_fkey")
  AudienceStatus  AudienceStatus? @relation(fields: [status_id], references: [id], map: "Audiencescontacts_statusId_fkey")

  @@index([audience_id], map: "Audiencescontacts_idAudience_idx")
  @@index([contact_id], map: "Audiencescontacts_idContact_idx")
  @@index([status_id], map: "Audiencescontacts_statusId_idx")
}

model CampaignAudience {
  id              Int          @id(map: "Campaignaudience_pkey") @default(autoincrement())
  campaign_id     Int?
  audience_id     Int?
  organization_id String
  Audiences       Audiences?   @relation(fields: [audience_id], references: [id], map: "Campaignaudience_idAudience_fkey")
  Campaigns       Campaigns?   @relation(fields: [campaign_id], references: [id], map: "Campaignaudience_idCampaign_fkey")
  Organization    Organization @relation(fields: [organization_id], references: [public_id], map: "Campaignaudience_organization_id_fkey")

  @@index([audience_id], map: "Campaignaudience_idAudience_idx")
  @@index([campaign_id], map: "Campaignaudience_idCampaign_idx")
}

model CampaignDetails {
  id                    Int                   @id(map: "Campaigndetails_pkey") @default(autoincrement())
  contact_id            Int
  campaign_id           Int
  sender                String?               @db.VarChar(100)
  sent_at               DateTime?
  status_id             Int
  created_at            DateTime?             @default(now())
  updated_at            DateTime?             @default(now()) @db.Timestamp(0)
  sender_id             String?               @db.VarChar(100)
  organization_id       String
  obs                   String?
  Campaigns             Campaigns             @relation(fields: [campaign_id], references: [id], map: "Campaigndetails_idCampaign_fkey")
  CustomerUnified       CustomerUnified       @relation(fields: [contact_id], references: [id], map: "Campaigndetails_idContact_fkey")
  Organization          Organization          @relation(fields: [organization_id], references: [public_id], map: "Campaigndetails_organization_id_fkey")
  CampaignDetailsStatus CampaignDetailsStatus @relation(fields: [status_id], references: [id], map: "Campaigndetails_statusId_fkey")

  @@index([created_at, status_id], map: "Campaigndetails_createdAt_statusId_idx")
  @@index([campaign_id, sender, status_id], map: "Campaigndetails_idCampaign_sender_statusId_idx")
  @@index([campaign_id, status_id], map: "Campaigndetails_idCampaign_statusId_idx")
  @@index([campaign_id, updated_at], map: "Campaigndetails_idCampaign_updatedAt_idx")
  @@index([contact_id], map: "Campaigndetails_idContact_idx")
  @@index([sender], map: "Campaigndetails_sender_idx")
  @@index([sender, sent_at], map: "Campaigndetails_sender_sentAt_idx")
  @@index([status_id], map: "Campaigndetails_statusId_idx")
  @@index([updated_at], map: "Campaigndetails_updatedAt_idx")
}

model CampaignDetailsStatus {
  id              Int               @id(map: "Campaigndetailsstatus_pkey") @default(autoincrement())
  name            String            @db.VarChar(255)
  created_at      DateTime?         @default(now())
  created_by      Int?
  updated_at      DateTime?
  updated_by      Int?
  organization_id String
  CampaignDetails CampaignDetails[]
  Organization    Organization      @relation(fields: [organization_id], references: [public_id], map: "Campaigndetailsstatus_organization_id_fkey")
}

model CampaignStatus {
  id              Int          @id(map: "Campaignstatus_pkey") @default(autoincrement())
  name            String       @db.VarChar(255)
  description     String?      @db.VarChar(255)
  created_at      DateTime?    @default(now())
  created_by      Int?
  updated_at      DateTime?    @default(now())
  updated_by      Int?
  organization_id String
  Organization    Organization @relation(fields: [organization_id], references: [public_id], map: "Campaignstatus_organization_id_fkey")
  Campaigns       Campaigns[]
}

model ImportJob {
  id              String       @id
  status          StatusJob
  file_name       String
  file_size       Int
  total_items     Int          @default(0)
  total_processed Int          @default(0)
  total_success   Int          @default(0)
  total_errors    Int          @default(0)
  progress        Int          @default(0)
  error_message   String?
  error_details   String?
  organization_id String
  created_at      DateTime     @default(now())
  completed_at    DateTime?
  Organization    Organization @relation(fields: [organization_id], references: [public_id])
}

model RFM {
  id                  Int             @id @default(autoincrement())
  customer_unified_id Int
  score_r             Int
  score_fm            Float           @db.Real
  organization_id     String
  score_f             Int?
  score_m             Int?
  updated_at          DateTime?       @default(now()) @db.Timestamptz(6)
  CustomerUnified     CustomerUnified @relation(fields: [customer_unified_id], references: [id])
  Organization        Organization    @relation(fields: [organization_id], references: [public_id])

  @@index([customer_unified_id])
  @@index([customer_unified_id, organization_id])
  @@index([id])
  @@index([organization_id])
}

model SellerChain {
  id              Int          @id(map: "sellerchain_pk") @default(autoincrement())
  name            String
  organization_id String
  created_at      DateTime?    @default(now())
  updated_at      DateTime?
  Seller          Seller[]
  Organization    Organization @relation(fields: [organization_id], references: [public_id], onDelete: NoAction, onUpdate: NoAction, map: "sellerchain_organization_fk")
}

enum Role {
  ADMIN
  MEMBER
  BILLING
  SUPER
}

enum StatusJob {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
